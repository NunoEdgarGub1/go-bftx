// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Bftransaction.proto

/*
Package bfimports is a generated protocol buffer package.

It is generated from these files:
	Bftransaction.proto
	saberservice.proto

It has these top-level messages:
	BFTXTransaction
	SignKey
	BFTX_Payload
	ISSUEDETAILS
	MASTERINFO
	AGENTFORMASTER
	AGENTFOROWNER
	BFTX_EncodeRequest
	BFTX_DecodeRequest
	BFTXEncryptionConfig
	ENCRYPTIONFIELD
	PUBLICKEYS
*/
package bfimports

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BFTXTransaction struct {
	Properties  *BFTX_Payload `protobuf:"bytes,1,opt,name=Properties" json:"Properties,omitempty"`
	Id          string        `protobuf:"bytes,2,opt,name=Id" json:"Id,omitempty"`
	PrivateKey  *SignKey      `protobuf:"bytes,3,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
	Signhash    string        `protobuf:"bytes,4,opt,name=Signhash" json:"Signhash,omitempty"`
	Signature   string        `protobuf:"bytes,5,opt,name=Signature" json:"Signature,omitempty"`
	Verified    bool          `protobuf:"varint,6,opt,name=Verified" json:"Verified,omitempty"`
	Transmitted bool          `protobuf:"varint,7,opt,name=Transmitted" json:"Transmitted,omitempty"`
	Amendment   string        `protobuf:"bytes,8,opt,name=Amendment" json:"Amendment,omitempty"`
	Private     string        `protobuf:"bytes,9,opt,name=Private" json:"Private,omitempty"`
}

func (m *BFTXTransaction) Reset()                    { *m = BFTXTransaction{} }
func (m *BFTXTransaction) String() string            { return proto.CompactTextString(m) }
func (*BFTXTransaction) ProtoMessage()               {}
func (*BFTXTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BFTXTransaction) GetProperties() *BFTX_Payload {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *BFTXTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BFTXTransaction) GetPrivateKey() *SignKey {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *BFTXTransaction) GetSignhash() string {
	if m != nil {
		return m.Signhash
	}
	return ""
}

func (m *BFTXTransaction) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *BFTXTransaction) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *BFTXTransaction) GetTransmitted() bool {
	if m != nil {
		return m.Transmitted
	}
	return false
}

func (m *BFTXTransaction) GetAmendment() string {
	if m != nil {
		return m.Amendment
	}
	return ""
}

func (m *BFTXTransaction) GetPrivate() string {
	if m != nil {
		return m.Private
	}
	return ""
}

type SignKey struct {
	Curve string `protobuf:"bytes,1,opt,name=Curve" json:"Curve,omitempty"`
	X     string `protobuf:"bytes,2,opt,name=X" json:"X,omitempty"`
	Y     string `protobuf:"bytes,3,opt,name=Y" json:"Y,omitempty"`
	D     string `protobuf:"bytes,4,opt,name=D" json:"D,omitempty"`
}

func (m *SignKey) Reset()                    { *m = SignKey{} }
func (m *SignKey) String() string            { return proto.CompactTextString(m) }
func (*SignKey) ProtoMessage()               {}
func (*SignKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignKey) GetCurve() string {
	if m != nil {
		return m.Curve
	}
	return ""
}

func (m *SignKey) GetX() string {
	if m != nil {
		return m.X
	}
	return ""
}

func (m *SignKey) GetY() string {
	if m != nil {
		return m.Y
	}
	return ""
}

func (m *SignKey) GetD() string {
	if m != nil {
		return m.D
	}
	return ""
}

type BFTX_Payload struct {
	Shipper             string          `protobuf:"bytes,1,opt,name=Shipper" json:"Shipper,omitempty"`
	BolNum              int32           `protobuf:"varint,2,opt,name=BolNum" json:"BolNum,omitempty"`
	RefNum              int64           `protobuf:"varint,3,opt,name=RefNum" json:"RefNum,omitempty"`
	Vessel              int64           `protobuf:"varint,4,opt,name=Vessel" json:"Vessel,omitempty"`
	PortOfLoading       string          `protobuf:"bytes,5,opt,name=PortOfLoading" json:"PortOfLoading,omitempty"`
	PortOfDischarge     string          `protobuf:"bytes,6,opt,name=PortOfDischarge" json:"PortOfDischarge,omitempty"`
	UnitOfVolume        string          `protobuf:"bytes,7,opt,name=UnitOfVolume" json:"UnitOfVolume,omitempty"`
	NotifyAddress       string          `protobuf:"bytes,8,opt,name=NotifyAddress" json:"NotifyAddress,omitempty"`
	DescOfGoods         string          `protobuf:"bytes,9,opt,name=DescOfGoods" json:"DescOfGoods,omitempty"`
	GrossWeight         float32         `protobuf:"fixed32,10,opt,name=GrossWeight" json:"GrossWeight,omitempty"`
	FreightPayableAmt   int32           `protobuf:"varint,11,opt,name=FreightPayableAmt" json:"FreightPayableAmt,omitempty"`
	FreightAdvAmt       int64           `protobuf:"varint,12,opt,name=FreightAdvAmt" json:"FreightAdvAmt,omitempty"`
	GeneralInstructions string          `protobuf:"bytes,13,opt,name=GeneralInstructions" json:"GeneralInstructions,omitempty"`
	DateShipped         string          `protobuf:"bytes,14,opt,name=DateShipped" json:"DateShipped,omitempty"`
	IssueDetails        *ISSUEDETAILS   `protobuf:"bytes,15,opt,name=IssueDetails" json:"IssueDetails,omitempty"`
	NumBol              int64           `protobuf:"varint,16,opt,name=NumBol" json:"NumBol,omitempty"`
	MasterInfo          *MASTERINFO     `protobuf:"bytes,17,opt,name=MasterInfo" json:"MasterInfo,omitempty"`
	AgentForMaster      *AGENTFORMASTER `protobuf:"bytes,18,opt,name=AgentForMaster" json:"AgentForMaster,omitempty"`
	AgentForOwner       *AGENTFOROWNER  `protobuf:"bytes,19,opt,name=AgentForOwner" json:"AgentForOwner,omitempty"`
	EncryptionMetaData  string          `protobuf:"bytes,20,opt,name=EncryptionMetaData" json:"EncryptionMetaData,omitempty"`
	Consignee           string          `protobuf:"bytes,21,opt,name=Consignee" json:"Consignee,omitempty"`
	HouseBill           string          `protobuf:"bytes,22,opt,name=HouseBill" json:"HouseBill,omitempty"`
	ReceiveAgent        string          `protobuf:"bytes,23,opt,name=ReceiveAgent" json:"ReceiveAgent,omitempty"`
	Destination         string          `protobuf:"bytes,24,opt,name=Destination" json:"Destination,omitempty"`
	MarksAndNumbers     string          `protobuf:"bytes,25,opt,name=MarksAndNumbers" json:"MarksAndNumbers,omitempty"`
	UnitOfWeight        string          `protobuf:"bytes,26,opt,name=UnitOfWeight" json:"UnitOfWeight,omitempty"`
	Volume              float32         `protobuf:"fixed32,27,opt,name=Volume" json:"Volume,omitempty"`
	Container           string          `protobuf:"bytes,28,opt,name=Container" json:"Container,omitempty"`
	ContainerSeal       string          `protobuf:"bytes,29,opt,name=ContainerSeal" json:"ContainerSeal,omitempty"`
	Packages            int64           `protobuf:"varint,30,opt,name=Packages" json:"Packages,omitempty"`
	PackType            string          `protobuf:"bytes,31,opt,name=PackType" json:"PackType,omitempty"`
	INCOTerms           string          `protobuf:"bytes,32,opt,name=INCOTerms" json:"INCOTerms,omitempty"`
	DeliverAgent        string          `protobuf:"bytes,33,opt,name=DeliverAgent" json:"DeliverAgent,omitempty"`
	ContainerMode       string          `protobuf:"bytes,34,opt,name=ContainerMode" json:"ContainerMode,omitempty"`
	ContainerType       string          `protobuf:"bytes,35,opt,name=ContainerType" json:"ContainerType,omitempty"`
}

func (m *BFTX_Payload) Reset()                    { *m = BFTX_Payload{} }
func (m *BFTX_Payload) String() string            { return proto.CompactTextString(m) }
func (*BFTX_Payload) ProtoMessage()               {}
func (*BFTX_Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BFTX_Payload) GetShipper() string {
	if m != nil {
		return m.Shipper
	}
	return ""
}

func (m *BFTX_Payload) GetBolNum() int32 {
	if m != nil {
		return m.BolNum
	}
	return 0
}

func (m *BFTX_Payload) GetRefNum() int64 {
	if m != nil {
		return m.RefNum
	}
	return 0
}

func (m *BFTX_Payload) GetVessel() int64 {
	if m != nil {
		return m.Vessel
	}
	return 0
}

func (m *BFTX_Payload) GetPortOfLoading() string {
	if m != nil {
		return m.PortOfLoading
	}
	return ""
}

func (m *BFTX_Payload) GetPortOfDischarge() string {
	if m != nil {
		return m.PortOfDischarge
	}
	return ""
}

func (m *BFTX_Payload) GetUnitOfVolume() string {
	if m != nil {
		return m.UnitOfVolume
	}
	return ""
}

func (m *BFTX_Payload) GetNotifyAddress() string {
	if m != nil {
		return m.NotifyAddress
	}
	return ""
}

func (m *BFTX_Payload) GetDescOfGoods() string {
	if m != nil {
		return m.DescOfGoods
	}
	return ""
}

func (m *BFTX_Payload) GetGrossWeight() float32 {
	if m != nil {
		return m.GrossWeight
	}
	return 0
}

func (m *BFTX_Payload) GetFreightPayableAmt() int32 {
	if m != nil {
		return m.FreightPayableAmt
	}
	return 0
}

func (m *BFTX_Payload) GetFreightAdvAmt() int64 {
	if m != nil {
		return m.FreightAdvAmt
	}
	return 0
}

func (m *BFTX_Payload) GetGeneralInstructions() string {
	if m != nil {
		return m.GeneralInstructions
	}
	return ""
}

func (m *BFTX_Payload) GetDateShipped() string {
	if m != nil {
		return m.DateShipped
	}
	return ""
}

func (m *BFTX_Payload) GetIssueDetails() *ISSUEDETAILS {
	if m != nil {
		return m.IssueDetails
	}
	return nil
}

func (m *BFTX_Payload) GetNumBol() int64 {
	if m != nil {
		return m.NumBol
	}
	return 0
}

func (m *BFTX_Payload) GetMasterInfo() *MASTERINFO {
	if m != nil {
		return m.MasterInfo
	}
	return nil
}

func (m *BFTX_Payload) GetAgentForMaster() *AGENTFORMASTER {
	if m != nil {
		return m.AgentForMaster
	}
	return nil
}

func (m *BFTX_Payload) GetAgentForOwner() *AGENTFOROWNER {
	if m != nil {
		return m.AgentForOwner
	}
	return nil
}

func (m *BFTX_Payload) GetEncryptionMetaData() string {
	if m != nil {
		return m.EncryptionMetaData
	}
	return ""
}

func (m *BFTX_Payload) GetConsignee() string {
	if m != nil {
		return m.Consignee
	}
	return ""
}

func (m *BFTX_Payload) GetHouseBill() string {
	if m != nil {
		return m.HouseBill
	}
	return ""
}

func (m *BFTX_Payload) GetReceiveAgent() string {
	if m != nil {
		return m.ReceiveAgent
	}
	return ""
}

func (m *BFTX_Payload) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *BFTX_Payload) GetMarksAndNumbers() string {
	if m != nil {
		return m.MarksAndNumbers
	}
	return ""
}

func (m *BFTX_Payload) GetUnitOfWeight() string {
	if m != nil {
		return m.UnitOfWeight
	}
	return ""
}

func (m *BFTX_Payload) GetVolume() float32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *BFTX_Payload) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *BFTX_Payload) GetContainerSeal() string {
	if m != nil {
		return m.ContainerSeal
	}
	return ""
}

func (m *BFTX_Payload) GetPackages() int64 {
	if m != nil {
		return m.Packages
	}
	return 0
}

func (m *BFTX_Payload) GetPackType() string {
	if m != nil {
		return m.PackType
	}
	return ""
}

func (m *BFTX_Payload) GetINCOTerms() string {
	if m != nil {
		return m.INCOTerms
	}
	return ""
}

func (m *BFTX_Payload) GetDeliverAgent() string {
	if m != nil {
		return m.DeliverAgent
	}
	return ""
}

func (m *BFTX_Payload) GetContainerMode() string {
	if m != nil {
		return m.ContainerMode
	}
	return ""
}

func (m *BFTX_Payload) GetContainerType() string {
	if m != nil {
		return m.ContainerType
	}
	return ""
}

type ISSUEDETAILS struct {
	PlaceOfIssue string `protobuf:"bytes,1,opt,name=PlaceOfIssue" json:"PlaceOfIssue,omitempty"`
	DateOfIssue  string `protobuf:"bytes,2,opt,name=DateOfIssue" json:"DateOfIssue,omitempty"`
}

func (m *ISSUEDETAILS) Reset()                    { *m = ISSUEDETAILS{} }
func (m *ISSUEDETAILS) String() string            { return proto.CompactTextString(m) }
func (*ISSUEDETAILS) ProtoMessage()               {}
func (*ISSUEDETAILS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ISSUEDETAILS) GetPlaceOfIssue() string {
	if m != nil {
		return m.PlaceOfIssue
	}
	return ""
}

func (m *ISSUEDETAILS) GetDateOfIssue() string {
	if m != nil {
		return m.DateOfIssue
	}
	return ""
}

type MASTERINFO struct {
	FirstName string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	Sig       string `protobuf:"bytes,3,opt,name=Sig" json:"Sig,omitempty"`
}

func (m *MASTERINFO) Reset()                    { *m = MASTERINFO{} }
func (m *MASTERINFO) String() string            { return proto.CompactTextString(m) }
func (*MASTERINFO) ProtoMessage()               {}
func (*MASTERINFO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MASTERINFO) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *MASTERINFO) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *MASTERINFO) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

type AGENTFORMASTER struct {
	FirstName string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	Sig       string `protobuf:"bytes,3,opt,name=Sig" json:"Sig,omitempty"`
}

func (m *AGENTFORMASTER) Reset()                    { *m = AGENTFORMASTER{} }
func (m *AGENTFORMASTER) String() string            { return proto.CompactTextString(m) }
func (*AGENTFORMASTER) ProtoMessage()               {}
func (*AGENTFORMASTER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AGENTFORMASTER) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AGENTFORMASTER) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AGENTFORMASTER) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

type AGENTFOROWNER struct {
	FirstName             string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName              string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	Sig                   string `protobuf:"bytes,3,opt,name=Sig" json:"Sig,omitempty"`
	ConditionsForCarriage string `protobuf:"bytes,4,opt,name=ConditionsForCarriage" json:"ConditionsForCarriage,omitempty"`
}

func (m *AGENTFOROWNER) Reset()                    { *m = AGENTFOROWNER{} }
func (m *AGENTFOROWNER) String() string            { return proto.CompactTextString(m) }
func (*AGENTFOROWNER) ProtoMessage()               {}
func (*AGENTFOROWNER) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AGENTFOROWNER) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *AGENTFOROWNER) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *AGENTFOROWNER) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

func (m *AGENTFOROWNER) GetConditionsForCarriage() string {
	if m != nil {
		return m.ConditionsForCarriage
	}
	return ""
}

func init() {
	proto.RegisterType((*BFTXTransaction)(nil), "bfimports.BFTX_transaction")
	proto.RegisterType((*SignKey)(nil), "bfimports.SignKey")
	proto.RegisterType((*BFTX_Payload)(nil), "bfimports.BFTX_Payload")
	proto.RegisterType((*ISSUEDETAILS)(nil), "bfimports.ISSUEDETAILS")
	proto.RegisterType((*MASTERINFO)(nil), "bfimports.MASTERINFO")
	proto.RegisterType((*AGENTFORMASTER)(nil), "bfimports.AGENTFORMASTER")
	proto.RegisterType((*AGENTFOROWNER)(nil), "bfimports.AGENTFOROWNER")
}

func init() { proto.RegisterFile("Bftransaction.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdb, 0x6e, 0x1b, 0x37,
	0x10, 0x86, 0xb1, 0x72, 0x7d, 0x10, 0x2d, 0x3b, 0x0e, 0x1d, 0x27, 0x4c, 0x9a, 0xb6, 0xaa, 0xda,
	0x0b, 0x5f, 0x14, 0x46, 0x91, 0xb6, 0xe8, 0x45, 0x81, 0x02, 0x6b, 0x1d, 0xdc, 0x45, 0xac, 0x03,
	0x28, 0xc5, 0x71, 0x80, 0x02, 0x05, 0xad, 0x9d, 0x95, 0x88, 0xec, 0x2e, 0x05, 0x92, 0x52, 0xa1,
	0xc7, 0xe8, 0x53, 0xf4, 0x31, 0xfa, 0x6a, 0x05, 0x0f, 0x5a, 0xed, 0x2a, 0xbe, 0xcc, 0xdd, 0xce,
	0x37, 0xc3, 0x21, 0x67, 0x38, 0x3f, 0x25, 0x74, 0x7e, 0x9d, 0x68, 0xc9, 0x72, 0xc5, 0xa6, 0x9a,
	0x8b, 0xfc, 0x6a, 0x21, 0x85, 0x16, 0xb8, 0xfe, 0x90, 0xf0, 0x6c, 0x21, 0xa4, 0x56, 0xad, 0xff,
	0x6a, 0xe8, 0xec, 0xba, 0x37, 0xb9, 0xff, 0xab, 0x14, 0x85, 0x7f, 0x45, 0x68, 0x24, 0xc5, 0x02,
	0xa4, 0xe6, 0xa0, 0x48, 0xd0, 0x0c, 0x2e, 0x8f, 0xdf, 0xbc, 0xb8, 0x2a, 0x16, 0x5d, 0xd9, 0x05,
	0x23, 0xb6, 0x4e, 0x05, 0x8b, 0x69, 0x29, 0x14, 0x9f, 0xa2, 0x5a, 0x14, 0x93, 0x5a, 0x33, 0xb8,
	0xac, 0xd3, 0x5a, 0x14, 0xe3, 0x37, 0x26, 0x11, 0x5f, 0x31, 0x0d, 0x6f, 0x61, 0x4d, 0xf6, 0x6c,
	0x22, 0x5c, 0x4a, 0x34, 0xe6, 0xb3, 0xfc, 0x2d, 0xac, 0x69, 0x29, 0x0a, 0xbf, 0x42, 0x47, 0x06,
	0xcf, 0x99, 0x9a, 0x93, 0x2f, 0x6c, 0xa6, 0xc2, 0xc6, 0xaf, 0x51, 0xdd, 0x7c, 0x33, 0xbd, 0x94,
	0x40, 0xf6, 0xad, 0x73, 0x0b, 0xcc, 0xca, 0x3b, 0x90, 0x3c, 0xe1, 0x10, 0x93, 0x83, 0x66, 0x70,
	0x79, 0x44, 0x0b, 0x1b, 0x37, 0xd1, 0xf1, 0xc4, 0x54, 0x98, 0x71, 0xad, 0x21, 0x26, 0x87, 0xd6,
	0x5d, 0x46, 0x26, 0x77, 0x98, 0x41, 0x1e, 0x67, 0x90, 0x6b, 0x72, 0xe4, 0x72, 0x17, 0x00, 0x13,
	0x74, 0xe8, 0xcf, 0x48, 0xea, 0xd6, 0xb7, 0x31, 0x5b, 0x11, 0x3a, 0xf4, 0x65, 0xe0, 0x67, 0x68,
	0xbf, 0xbd, 0x94, 0x2b, 0xb0, 0x2d, 0xab, 0x53, 0x67, 0xe0, 0x06, 0x0a, 0xee, 0x7d, 0x4f, 0x82,
	0x7b, 0x63, 0x7d, 0xb0, 0x9d, 0xa8, 0xd3, 0xe0, 0x83, 0xb1, 0x3a, 0xbe, 0xca, 0xa0, 0xd3, 0xfa,
	0x17, 0xa1, 0x46, 0xb9, 0xb7, 0x66, 0xd7, 0xf1, 0x9c, 0x2f, 0x16, 0x20, 0x7d, 0xca, 0x8d, 0x89,
	0x9f, 0xa3, 0x83, 0x6b, 0x91, 0x0e, 0x96, 0x99, 0xcd, 0xbc, 0x4f, 0xbd, 0x65, 0x38, 0x85, 0xc4,
	0x70, 0xb3, 0xc7, 0x1e, 0xf5, 0x96, 0xe1, 0x77, 0xa0, 0x14, 0xa4, 0x76, 0xb7, 0x3d, 0xea, 0x2d,
	0xfc, 0x3d, 0x3a, 0x19, 0x09, 0xa9, 0x87, 0xc9, 0xad, 0x60, 0x31, 0xcf, 0x67, 0xbe, 0xab, 0x55,
	0x88, 0x2f, 0xd1, 0x13, 0x07, 0x3a, 0x5c, 0x4d, 0xe7, 0x4c, 0xce, 0xc0, 0x36, 0xb8, 0x4e, 0x77,
	0x31, 0x6e, 0xa1, 0xc6, 0xbb, 0x9c, 0xeb, 0x61, 0x72, 0x27, 0xd2, 0x65, 0x06, 0xb6, 0xd1, 0x75,
	0x5a, 0x61, 0x66, 0xcf, 0x81, 0xd0, 0x3c, 0x59, 0x87, 0x71, 0x2c, 0x41, 0x29, 0xdf, 0xed, 0x2a,
	0x34, 0x37, 0xd6, 0x01, 0x35, 0x1d, 0x26, 0x37, 0x42, 0xc4, 0xca, 0x77, 0xbd, 0x8c, 0x4c, 0xc4,
	0x8d, 0x14, 0x4a, 0xbd, 0x07, 0x3e, 0x9b, 0x6b, 0x82, 0x9a, 0xc1, 0x65, 0x8d, 0x96, 0x11, 0xfe,
	0x01, 0x3d, 0xed, 0x49, 0xfb, 0x39, 0x62, 0x6b, 0xf6, 0x90, 0x42, 0x98, 0x69, 0x72, 0x6c, 0x1b,
	0xf6, 0xa9, 0xc3, 0x9c, 0xcb, 0xc3, 0x30, 0x5e, 0x99, 0xc8, 0x86, 0x6d, 0x55, 0x15, 0xe2, 0x1f,
	0xd1, 0xf9, 0x0d, 0xe4, 0x20, 0x59, 0x1a, 0xe5, 0x4a, 0xcb, 0xa5, 0x95, 0x8c, 0x22, 0x27, 0xf6,
	0x7c, 0x8f, 0xb9, 0x6c, 0x25, 0x4c, 0x83, 0xbb, 0xba, 0x98, 0x9c, 0xfa, 0x4a, 0xb6, 0x08, 0xff,
	0x86, 0x1a, 0x91, 0x52, 0x4b, 0xe8, 0x80, 0x66, 0x3c, 0x55, 0xe4, 0xc9, 0x27, 0x92, 0x8b, 0xc6,
	0xe3, 0x77, 0xdd, 0x4e, 0x77, 0x12, 0x46, 0xb7, 0x63, 0x5a, 0x09, 0x36, 0x57, 0x3b, 0x58, 0x66,
	0xd7, 0x22, 0x25, 0x67, 0xee, 0x6a, 0x9d, 0x85, 0x7f, 0x41, 0xa8, 0xcf, 0x94, 0x06, 0x19, 0xe5,
	0x89, 0x20, 0x4f, 0x6d, 0xca, 0x8b, 0x52, 0xca, 0x7e, 0x38, 0x9e, 0x74, 0x69, 0x34, 0xe8, 0x0d,
	0x69, 0x29, 0x10, 0x87, 0xe8, 0x34, 0x9c, 0x41, 0xae, 0x7b, 0x42, 0x3a, 0x4a, 0xb0, 0x5d, 0xfa,
	0xb2, 0xb4, 0x34, 0xbc, 0xe9, 0x0e, 0x26, 0xbd, 0x21, 0x75, 0x29, 0xe8, 0xce, 0x02, 0xfc, 0x3b,
	0x3a, 0xd9, 0x90, 0xe1, 0xdf, 0x39, 0x48, 0x72, 0x6e, 0x33, 0x90, 0x47, 0x32, 0x0c, 0xdf, 0x0f,
	0xba, 0x94, 0x56, 0xc3, 0xf1, 0x15, 0xc2, 0xdd, 0x7c, 0x2a, 0xd7, 0x0b, 0xd3, 0xbf, 0x3e, 0x68,
	0xd6, 0x61, 0x9a, 0x91, 0x67, 0xb6, 0x6f, 0x8f, 0x78, 0x8c, 0x74, 0xdb, 0x22, 0x57, 0x7c, 0x96,
	0x03, 0x90, 0x0b, 0x27, 0xdd, 0x02, 0x18, 0xef, 0x1f, 0x62, 0xa9, 0xe0, 0x9a, 0xa7, 0x29, 0x79,
	0xee, 0xbc, 0x05, 0x30, 0x03, 0x4b, 0x61, 0x0a, 0x7c, 0x05, 0xf6, 0x0c, 0xe4, 0x85, 0x1b, 0xd8,
	0x32, 0xf3, 0xa3, 0xa8, 0x79, 0xce, 0xcc, 0xb6, 0x84, 0x14, 0xa3, 0xb8, 0x41, 0x46, 0x20, 0x7d,
	0x26, 0x3f, 0xaa, 0x30, 0x8f, 0x07, 0xcb, 0xec, 0x01, 0xa4, 0x22, 0x2f, 0x9d, 0x40, 0x76, 0xf0,
	0x56, 0x20, 0x7e, 0x6a, 0x5f, 0x95, 0x05, 0xe2, 0xc7, 0xd6, 0x88, 0xd5, 0xc9, 0xe7, 0x4b, 0x3b,
	0xd3, 0xde, 0xf2, 0x75, 0x6a, 0xc6, 0x4d, 0x4f, 0x5f, 0x17, 0x75, 0x3a, 0x60, 0xc6, 0xb7, 0x30,
	0xc6, 0xc0, 0x52, 0xf2, 0x95, 0x93, 0x55, 0x05, 0x9a, 0x47, 0x72, 0xc4, 0xa6, 0x1f, 0xd9, 0x0c,
	0x14, 0xf9, 0xda, 0xce, 0x4b, 0x61, 0x6f, 0x7c, 0x93, 0xf5, 0x02, 0xc8, 0x37, 0xee, 0xe9, 0xdd,
	0xd8, 0x66, 0xef, 0x68, 0xd0, 0x1e, 0x4e, 0x40, 0x66, 0x8a, 0x34, 0xdd, 0xde, 0x05, 0x30, 0x55,
	0x75, 0x20, 0xe5, 0x2b, 0x90, 0xae, 0x8b, 0xdf, 0xba, 0xaa, 0xca, 0xac, 0x72, 0xbe, 0xbe, 0x88,
	0x81, 0xb4, 0x76, 0xce, 0x67, 0x60, 0x25, 0xca, 0x1e, 0xe4, 0xbb, 0x9d, 0x28, 0x03, 0x5b, 0x13,
	0xd4, 0x28, 0x2b, 0xc2, 0xec, 0x3f, 0x4a, 0xd9, 0x14, 0x86, 0x89, 0x95, 0x86, 0x7f, 0x2d, 0x2b,
	0x6c, 0x23, 0xc3, 0x4d, 0x48, 0x6d, 0x2b, 0x43, 0x8f, 0x5a, 0xf7, 0x08, 0x6d, 0x45, 0x61, 0x2a,
	0xee, 0x71, 0xa9, 0xf4, 0x80, 0x65, 0x9b, 0x84, 0x5b, 0x60, 0x7a, 0x75, 0xcb, 0xbc, 0xd3, 0xa5,
	0x2a, 0x6c, 0x7c, 0x86, 0xf6, 0xc6, 0x7c, 0xe6, 0x5f, 0x79, 0xf3, 0xd9, 0xfa, 0x13, 0x9d, 0x56,
	0x35, 0xf3, 0x59, 0xb3, 0xff, 0x13, 0xa0, 0x93, 0x8a, 0xa0, 0x3e, 0x67, 0x76, 0xfc, 0x33, 0xba,
	0x68, 0x8b, 0x3c, 0xe6, 0xf6, 0x31, 0xeb, 0x09, 0xd9, 0x66, 0x52, 0x72, 0x36, 0x03, 0xff, 0xbb,
	0xf5, 0xb8, 0xf3, 0xe1, 0xc0, 0xfe, 0xd5, 0xf8, 0xe9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34,
	0x2d, 0xa5, 0xcc, 0x81, 0x08, 0x00, 0x00,
}
